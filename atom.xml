<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>运启霖泽</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-07T09:24:06.601Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>It is mine</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反序列化漏洞学习</title>
    <link href="http://example.com/2025/04/07/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/04/07/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-04-07T09:23:28.000Z</published>
    <updated>2025-04-07T09:24:06.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化漏洞分析"><a href="#PHP反序列化漏洞分析" class="headerlink" title="PHP反序列化漏洞分析"></a>PHP反序列化漏洞分析</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210170102320.png" alt="image-20241210170102320"></li></ol><p>对于字符串来说，比<code>PHP</code>对象更容易存储、在网络上进行传输；</p><p>对象有比较复杂的内存结构，有属性，有方法，有属性的值，有属性的访问控制权限等，这样非常复杂的内存结构很难在网络是传输，</p><p><code>serialize()</code>: 序列化，参数传入的是一个对象，输出是字符串；</p><p><code>unserialize()</code>：反序列化， 输入是字符串，输出是一个对象；</p><ol start="2"><li><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210170436061.png" alt="image-20241210170436061"></p><ul><li>在test这个类里，有三个属性<code>flag，test，test1</code>，他们有这不同的访问控制权限；</li><li>他们还各自有两个方法：<code>set_flag ,get_flag</code> ,</li><li><code>$object = new test()</code> :实例化这样一个对象；</li><li><code>$object -&gt;set_flag(&#39;Active&#39;)&quot;</code>：调用这个对象的<code>set_flag</code>方法，相当于把<code>$flag</code>从<code>Inactive</code>改为<code>Active</code>；</li><li><code>$data = serialize($object)</code>:对它做序列化操作；</li><li>打印输出，就是右侧这个样子；</li></ul></li><li><p>保留了这个对象的所有属性名（<code>falg,test,test1</code>)；保留了它的属性值（<code>Active,test,test1</code>）；还保留了这些属性的访问控制权限</p><p><code>public</code>成员变量的名字直接写就行；</p><p><code>protected</code>成员变量的名字前需要加上%00*%00；</p><p><code>private</code>成员变量的名字前需要加上%00类名%00；</p></li><li><p>序列化的过程，只序列化属性，不序列化方法；</p><p>序列化后就看不到get_flag；</p></li><li><p>反序列化过程，从右边字符串展开到左边对象这个过程， </p></li><li><p>反序列化的漏洞：攻击者精心构造一个右边的字符串，输进这个系统里，然后在它转换成对象的过程中，实现攻击。</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;john&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isOK</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_username</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;usernme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$serialized</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialized</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;%00&quot;</span>, <span class="variable">$serialized</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;整型 &quot;</span> . <span class="title function_ invoke__">serialize</span>(<span class="number">10</span>) . PHP_EOL;<span class="comment">//.PHP_EOL，预定义常量，换行</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;浮点型 &quot;</span> . <span class="title function_ invoke__">serialize</span>(<span class="number">13.14</span>).PHP_EOL; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;字符串 &quot;</span> . <span class="title function_ invoke__">serialize</span>(<span class="string">&quot;This is a string&quot;</span>). PHP_EOL; <span class="comment">// 字符串 s:16:&quot;This is a string&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;布尔型 &quot;</span> . <span class="title function_ invoke__">serialize</span>(<span class="literal">FALSE</span>). PHP_EOL; <span class="comment">// 布尔型 b:0;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NULL &quot;</span> . <span class="title function_ invoke__">serialize</span>(<span class="literal">NULL</span>). PHP_EOL; <span class="comment">// NULL N;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;数组 &quot;</span> . <span class="title function_ invoke__">serialize</span>([<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>]). PHP_EOL;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250402185723022.png" alt="image-20250402185723022"></p><table><thead><tr><th align="left">首字符</th><th align="left">数据类型</th><th align="left">示例序列化字符串</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>a</code></td><td align="left">Array</td><td align="left"><code>a:3:&#123;i:0;i:1;i:1;s:3:&quot;two&quot;;i:2;i:3;&#125;</code></td><td align="left">数组</td></tr><tr><td align="left"><code>b</code></td><td align="left">Boolean</td><td align="left"><code>b:1;</code> 或 <code>b:0;</code></td><td align="left">布尔值(true&#x2F;false)</td></tr><tr><td align="left"><code>d</code></td><td align="left">Double&#x2F;Float</td><td align="left"><code>d:3.14;</code></td><td align="left">浮点数</td></tr><tr><td align="left"><code>i</code></td><td align="left">Integer</td><td align="left"><code>i:42;</code></td><td align="left">整数</td></tr><tr><td align="left"><code>N</code></td><td align="left">NULL</td><td align="left"><code>N;</code></td><td align="left">空值</td></tr><tr><td align="left"><code>O</code></td><td align="left">Object</td><td align="left"><code>O:8:&quot;stdClass&quot;:0:&#123;&#125;</code></td><td align="left">对象</td></tr><tr><td align="left"><code>r</code></td><td align="left">Reference</td><td align="left"><code>r:1;</code></td><td align="left">引用(已弃用)</td></tr><tr><td align="left"><code>R</code></td><td align="left">Reference</td><td align="left"><code>R:1;</code></td><td align="left">对象引用</td></tr><tr><td align="left"><code>s</code></td><td align="left">String</td><td align="left"><code>s:5:&quot;hello&quot;;</code></td><td align="left">字符串</td></tr><tr><td align="left"><code>S</code></td><td align="left">Escaped String</td><td align="left"><code>S:5:&quot;\61\62\63&quot;;</code></td><td align="left">转义字符串(二进制安全)</td></tr><tr><td align="left"><code>C</code></td><td align="left">Custom Object</td><td align="left"><code>C:11:&quot;MyClass&quot;:5:&#123;...&#125;</code></td><td align="left">实现了Serializable接口的对象</td></tr></tbody></table><h2 id="反序列化攻击概述"><a href="#反序列化攻击概述" class="headerlink" title="反序列化攻击概述"></a>反序列化攻击概述</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210171558290.png" alt="image-20241210171558290"></p><p>有些方法往往已经存在，并会被调用。</p><p>构造函数，析构函数等（在C++中一定会被调用），在<code>PHP</code>中也存在这些方法，称为魔术方法。</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210172228879.png" alt="image-20241210172228879"></p><p>  一般的方法，需要我们手动调用，比如：object -&gt;方法名称（参数）这样调用，上图就无须这样。</p><p>反序列化只能控制属性，没办法控制反序列化后这个代码会调用什么方法，而魔术方法的调用，是在满足某种条件下会自动调用的，无需人工写一些代码去调用，所有只要在魔术方法当中存在一些我们能利用的函数，我们就能够通过反序列化，对这个对象的属性做特殊的操控，进而影响对这些函数的调用逻辑，来实现我们攻击的目的。</p><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216143908179.png" alt="image-20241216143908179"></p><p>可以把他理解为<code>PHP</code>里的构造函数：当一个对象被实例化的时候，就会自动被调用</p><p>在A这个类，有一个<code>__construct()</code>魔术方法，它会输出”This is a construct function”这句话，当代码执行到第10行”$a &#x3D; new A()”$a这个变量，它是A的实例化的时候，紧接着他就会自动的去实行4~8行这个方法，所以屏幕上就会出现那句话。</p><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216145059245.png" alt="image-20241216145059245"></p><p>可以理解为PHP中的析构函数：当一个对象的内存空间被回收的时候，就会自动调用它的析构函数，</p><p>A这个类中，有两个魔术方法 __ construct()  ,__ destruct(),当代码执行15行代码，对A这个对象进行实例化的时候，会自动调用第4行的 __ construct()这个方法，然后程序执行结束，a这个对象的内存空间会被回收，在此之前这个对象要被析构掉，在这个PHP代码执行结束之前，还会执行第9行这__ destruct()这个方法，所以这个屏幕上会出翔两行字。</p><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216151201685.png" alt="image-20241216151201685"></p><p>在序列化的时候，会被调用，他原本的目的是返回一个需要被序列化的属性数组。</p><p>在A这个类里有两个属性：test，test2，有两个魔术方法__ construct()，__ sleep()，construct()不再赘述，在执行第18行代码对a这个属性做序列化的时候，就会 自动调用a所属的类是__ sleep()这个魔术方法：先输出这个字符串，再返回一个数组，数组里面包含需要被序列化的属性的名称，换句话说，这个a这个对象有两个属性test，和test2，返回的这个数组，表明只有test这个属性会被序列化。这是sleep这个方法本身的含义</p><p>对于我们来说，我们需要知道是的是它调用的时机，当看到序列化函数的时候，就知道sleep这个方法一定会被调用。</p><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216151712426.png" alt="image-20241216151712426"></p><p>再反序列化的时候被自动调用</p><p>24：这个反序列化这个过程看起来像是也构造一个对象一样，但是，他不会调用这个对象的construct魔术方法，会调用这个对象的wakeup魔术方法。</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216152203081.png" alt="image-20241216152203081"></p><p>当我们把一个对象当作字符串来使用的时候，就等价于调用它的toString魔术方法，</p><p>17：再输出$a：把$a这个对象当作字符串来使用，就会调用toString这个魔术方法，最后屏幕上就会输出：”This is a toString function”。</p><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216152726842.png" alt="image-20241216152726842"></p><p>当把一个对象当作函数来使用的时候，就会调用invoke魔术方法</p><p>16:$a是一个对象，但再a后边加了()，相当于按照一个函数一样的在调用这个对象，16行的函数调用就等价于9行这个invoke这个魔术方法的实行。</p><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216153851465.png" alt="image-20241216153851465"></p><p>在调用一个对象不存在的方法时候，就等价于调用call魔术方法</p><p>A这个类并不存在test这个魔术方法，但他却同时定义了call魔术方法，17行在调用test这个魔术方法的时候，就等价于调用call这个方法，</p><p>call魔术方法会接收两个参数，第一个参数：是调用的那个并不存在的魔术方法名（test），第二个：是他所传入的参数（’no’，’this’，’function’）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>名称</th><th>触发机制</th></tr></thead><tbody><tr><td>__construct()</td><td>在对象实例化（创建对象）的时候自动触发</td></tr><tr><td>__destruct()</td><td>在销毁对象的时候自动触发</td></tr><tr><td>__wakeup()</td><td>执行unserialize()时，先会调用这个函数</td></tr><tr><td>__sleep()</td><td>执行serialize()时，先会调用这个函数</td></tr><tr><td>__call()</td><td>在对象上下文中调用不可访问的方法时触发</td></tr><tr><td>__get()</td><td>访问私有或不存在的成员属性的时候自动触发</td></tr><tr><td>__set()</td><td>对私有成员属性进行设置值时自动触发</td></tr><tr><td>__isset()</td><td>对私有成员属性进行 isset 进行检查时自动触发</td></tr><tr><td>__unset()</td><td>对私有成员属性进行 unset 进行检查时自动触发</td></tr><tr><td>__toString()</td><td>把类当作字符串使用时触发</td></tr><tr><td>__invoke()</td><td>当尝试将对象调用为函数时触发</td></tr></tbody></table><h2 id="反序列化攻击"><a href="#反序列化攻击" class="headerlink" title="反序列化攻击"></a>反序列化攻击</h2><p>组建攻击链：各种魔术方法组合起来，最终形成一个可以实现我们攻击目的的一个攻击链</p><h3 id="反序列化攻击样例"><a href="#反序列化攻击样例" class="headerlink" title="反序列化攻击样例"></a>反序列化攻击样例</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241216193233111.png" alt="image-20241216193233111"></p><p>25：反序列化攻击的入口，</p><p>反序列化攻击，需要我们构造对应的序列化字符串，需要把其中的某一个类，把它序列化掉，通过控制它的属性来实现攻击</p><p>现在有三个类，可以向其中传入一个实例化的对象，可以先排除后两个对象（后两个反序列化后没有任何意义：它没有调用任何的方法），放入Aurora这个实例化的类，construct魔术方法无法调用（在反序列化中，调用的是<code>__wakeup()</code>），调用destruct魔术方法：调用test属性的action方法。test里必须放入一个能被action方法的值，</p><p>例如：可以把Auroa对象的test属性附成是一个L对象，屏幕上会出翔”CUMT”；</p><p>往test属性，附一个Evil对象：Evil属性的action方法会被调用，</p><p>eval（）：任意命令执行；</p><p>构造序列化字符串：必须代表一个Aurora对象；这个Aurora对象的test属性必须是一个eval对象；这个eval对象的test2属性必须是一个我们想要执行的命令</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250403141822772.png" alt="image-20250403141822772"></p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250403143210935.png" alt="image-20250403143210935"></p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250403143327027.png" alt="image-20250403143327027"></p><p><a href="https://www.nssctf.cn/problem/2099">https://www.nssctf.cn/problem/2099</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>=<span class="string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$try</span>=<span class="keyword">new</span> <span class="title class_">Try_Work_Hard</span>;</span><br><span class="line"><span class="variable">$make</span>=<span class="keyword">new</span> <span class="title class_">Make_a_Change</span>;</span><br><span class="line"><span class="variable">$make</span>-&gt;effort=<span class="variable">$try</span>;</span><br><span class="line"><span class="variable">$road</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line"><span class="variable">$road</span>-&gt;<span class="keyword">string</span>=<span class="variable">$make</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;page=<span class="variable">$road</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//O%3A12%3A%22Road_is_Long%22%3A2%3A%7Bs%3A4%3A%22page%22%3BO%3A12%3A%22Road_is_Long%22%3A2%3A%7Bs%3A4%3A%22page%22%3BN%3Bs%3A6%3A%22string%22%3BO%3A13%3A%22Make_a_Change%22%3A1%3A%7Bs%3A6%3A%22effort%22%3BO%3A13%3A%22Try_Work_Hard%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A49%3A%22php%3A%2F%2Ffilter%2Fconvert.base64-encode%2Fresource%3D%2Fflag%22%3B%7D%7D%7Ds%3A6%3A%22string%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP反序列化漏洞分析&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞分析&quot;&gt;&lt;/a&gt;PHP反序列化漏洞分析&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RCE1.0</title>
    <link href="http://example.com/2025/03/21/RCE1-0/"/>
    <id>http://example.com/2025/03/21/RCE1-0/</id>
    <published>2025-03-21T12:55:21.000Z</published>
    <updated>2025-03-21T12:58:20.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-NSSRound-8-Basic-MyDoor"><a href="#1-NSSRound-8-Basic-MyDoor" class="headerlink" title="1.[NSSRound#8 Basic]MyDoor"></a>1.[NSSRound#8 Basic]MyDoor</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20150213.png"></p><p>什么也没有，</p><p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php</p><p>然后解码：</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20145921.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">**`<span class="meta">&lt;?php</span>`**</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);`**</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;N_S.S&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;N_S.S&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:/index.php?file=&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.|la|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>error_reporting(0);</code></strong> 关闭了所有的错误报告。</p><ul><li>因为_作为参数在php是非法的，所以需要用[来替代</li></ul><p><strong><code>eval($_GET[&#39;N_S.S&#39;]);</code></strong></p><ul><li>如果 URL 参数 <code>N_S.S</code> 存在，会将其内容作为 PHP 代码执行</li></ul><p><strong>文件包含逻辑</strong></p><ul><li>如果 URL 参数 <code>file</code> 不存在，会重定向到 <code>index.php?file=</code>。</li><li>如果 <code>file</code> 参数存在，会检查其值是否包含黑名单中的字符串（如 <code>..</code>, <code>la</code>, <code>data</code>, <code>input</code>, <code>glob</code>, <code>gopher</code>, <code>file</code>, <code>http</code>, <code>phar</code>, <code>localhost</code>, <code>?</code>, <code>*</code>, <code>~</code>, <code>zip</code>, <code>7z</code>, <code>compress</code> 等）。</li><li>如果 <code>file</code> 参数的值通过黑名单检查，会将其作为文件路径包含进来（<code>include $file;</code>）</li></ul><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候，php会将怪异的变量名转换成有效的，在进行解析时会删除空白符，并将空格、+、点、[ 转换为下划线。但是用一个特性是可以绕过的，就是当 [ 提前出现后，[ 会转换成下划线，而后面的字符就不会再被转义了。</p><p>方法一：</p><p>有些题目会将 flag 或敏感信息存储在环境变量中。通过 <code>env</code> 命令可以快速查看当前环境变量，寻找可能的线索。</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%25E5%25B1%258F%25E5%25B9%2595%25E6%2588%25AA%25E5%259B%25BE%25202025-03-16%2520151649.png"></p><p>NSSCTF{61c40417-c85a-4942-9ea4-372a0816557c}</p><p>方法二：</p><p><code>phpinfo()</code> 是 PHP 中的一个内置函数，用于<strong>显示当前 PHP 环境的配置信息</strong>。它会输出一个详细的 HTML 页面，包含 PHP 版本、服务器信息、加载的扩展、配置文件路径、环境变量等信息。</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250318194528793.png" alt="image-20250318194528793"></p><h2 id="2-MoeCTF-2021-babyRCE"><a href="#2-MoeCTF-2021-babyRCE" class="headerlink" title="2.[MoeCTF 2021]babyRCE"></a>2.[MoeCTF 2021]babyRCE</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20154052.png"></p><ol><li>禁止使用 cat more less head tac tail nl od vi vim sort（防止读取文件）。</li><li>禁止使用 空格（ ）、分号（;）、数字（0-9）、星号（*）、反引号（&#96;）、百分号（%）、重定向符号（&gt; &lt;）、引号（’ “）</li><li>过滤了空格的话，用${IFS}</li></ol><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20154308.png"></p><p>直接cat,</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20154504.png"></p><p>啥也没有，查看源代码；</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20154531.png"></p><p>NSSCTF{c09a935e-7121-4336-909b-f9e82dd27d79}</p><h2 id="3-SWPUCTF-2023-秋季新生赛-RCE-PLUS"><a href="#3-SWPUCTF-2023-秋季新生赛-RCE-PLUS" class="headerlink" title="3.[SWPUCTF 2023 秋季新生赛]RCE-PLUS"></a>3.[SWPUCTF 2023 秋季新生赛]RCE-PLUS</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20171105.png"></p><ol><li><strong><code>error_reporting(0);</code></strong><ul><li>关闭错误提示，防止泄露敏感信息。</li></ul></li><li><strong><code>highlight_file(__FILE__);</code></strong><ul><li>高亮显示当前文件的源代码。</li></ul></li><li><strong><code>strCheck</code> 函数</strong><ul><li>对用户输入的 <code>cmd</code> 参数进行黑名单过滤。</li><li>黑名单包括：<ul><li>特殊字符：<code>;</code>, <code>&amp;</code>, <code>$</code>, <code>\x09</code>（Tab 键）, <code>\x26</code>（&amp; 的十六进制表示）。</li><li>常见命令：<code>more</code>, <code>less</code>, <code>head</code>, <code>sort</code>, <code>tail</code>, <code>sed</code>, <code>cut</code>, <code>awk</code>, <code>strings</code>, <code>od</code>, <code>php</code>, <code>ping</code>, <code>flag</code>。</li></ul></li><li>如果输入包含黑名单中的内容，程序会终止并输出 <code>i hate this</code>。</li></ul></li><li><strong>命令执行逻辑</strong><ul><li>从 URL 参数 <code>cmd</code> 获取用户输入。</li><li>调用 <code>strCheck</code> 函数对输入进行检查。</li><li>如果通过检查，使用 <code>shell_exec($cmd);</code> 执行命令。</li></ul></li></ol><ul><li>黑名单过滤了一些特殊字符和常见命令，但可以通过以下方法绕过：<ul><li><strong>使用未过滤的命令</strong>：<ul><li>例如：<code>ls</code>, <code>cat</code>, <code>tac</code>, <code>nl</code>, <code>rev</code>, <code>grep</code>, <code>find</code>, <code>echo</code> 等。</li></ul></li><li><strong>使用通配符</strong>：<ul><li>例如：<code>*</code> 可以匹配任意字符。</li></ul></li><li><strong>使用未过滤的管道符</strong>：<ul><li>例如：<code>|</code>（管道符）未被过滤，可以用于连接多个命令。</li></ul></li><li><strong>使用编码绕过</strong>：<ul><li>例如：将命令编码为十六进制或 Base64，然后解码执行。</li></ul></li></ul></li></ul><p><strong><code>/?cmd=ls /|tee a.txt</code></strong></p><ol><li><strong><code>tee a.txt</code></strong><ul><li><code>tee</code> 是一个 Linux 命令，用于将输入内容同时输出到屏幕和文件中。</li><li><code>tee a.txt</code> 会将 <code>ls /</code> 的结果输出到屏幕，并保存到 <code>a.txt</code> 文件中。</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171420268.png" alt="image-20250316171420268"></p><p>接着  &#x2F;?cmd&#x3D;cat &#x2F;f*|tee a.txt</p><p>再访问a.xt</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171742247.png" alt="image-20250316171742247"></p><h2 id="4-SWPUCTF-2023-秋季新生赛-Pingpingping"><a href="#4-SWPUCTF-2023-秋季新生赛-Pingpingping" class="headerlink" title="4.[SWPUCTF 2023 秋季新生赛]Pingpingping"></a>4.[SWPUCTF 2023 秋季新生赛]Pingpingping</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20201434.png"></p><p>需要我们以<a href="https://so.csdn.net/so/search?q=get&spm=1001.2101.3001.7020">get</a>的方式提交参数Ping_ip.exe。然后我们提交的参数会在system()函数中与<a href="https://so.csdn.net/so/search?q=ping%E5%91%BD%E4%BB%A4&spm=1001.2101.3001.7020">ping命令</a>连接在一起进行执行。</p><p>这里面的ping命令形式是不完整的，所以我们必须要先补全我们的ping命令再进行cat命令抓取。</p><p>ping命令的最基本形式只需包含目标主机的地址。我们只需要将它所给出的ping命令加上主机地址即可。这里我测试的是任何ip都可以。</p><p>?Ping[ip.exe&#x3D;127.0.0.1||cat &#x2F;flag</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20201749.png"></p><h2 id="5-FSCTF-2023-细狗2-0"><a href="#5-FSCTF-2023-细狗2-0" class="headerlink" title="5.[FSCTF 2023]细狗2.0"></a>5.[FSCTF 2023]细狗2.0</h2><ol><li></li></ol><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316172351404.png" alt="image-20250316172351404"></p><p><img src="/.com//Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250316172334144.png" alt="image-20250316172334144"></p><p>2.发现有两个php，我们尝试用cat命令查看一下 ,尝试后构造出最终的payload</p><p>过滤了空格和cat 空格用${<a href="https://so.csdn.net/so/search?q=IFS&spm=1001.2101.3001.7020">IFS</a>}替换就行 cat用nl代替</p><p>1;nl${IFS}&#x2F;f*</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-16%20172713.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-NSSRound-8-Basic-MyDoor&quot;&gt;&lt;a href=&quot;#1-NSSRound-8-Basic-MyDoor&quot; class=&quot;headerlink&quot; title=&quot;1.[NSSRound#8 Basic]MyDoor&quot;&gt;&lt;/a&gt;1.[NSSRoun</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件包含漏洞分析</title>
    <link href="http://example.com/2025/03/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2025/03/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2025-03-16T13:05:30.000Z</published>
    <updated>2025-03-16T13:06:29.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含漏洞分析"><a href="#文件包含漏洞分析" class="headerlink" title="文件包含漏洞分析"></a>文件包含漏洞分析</h1><h2 id="什么是文件包含"><a href="#什么是文件包含" class="headerlink" title="什么是文件包含"></a>什么是文件包含</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210210458941.png" alt="image-20241210210458941"></p><ul><li><p>像C语言中”#include&lt;stdio.h&gt;”就是把stdio.h这个头文件引入到当前环境中，在PHP中也有这样类似的函数，这些函数也是把外部的文件内容引入到当前环境。</p></li><li><p>比方说：</p></li></ul><p>PHP中也有include(“”)里面配置的也是我们要引入的外部的文件名，不过在这里，它的文件是一个.php文件的话，它是会对它解析执行，这样子这个php当中，所有的文件的变量定义、函数，在接下来的代码当中都能够使用了。</p><ul><li>文件包含漏洞是怎么回事：</li></ul><p>它其实就发生在，当上面这些文件包含函数它们的参数由用户可控，或部分可控的时候，我们就说它存在了文件包含漏洞。</p><p>​- 比如说：在一个代码当中，像这样子的include这样的函数，它直接由用户传入了一个参数（include($_GET[file])）；</p><p>​- 再比如：说require($a)中$a受到了用户输入的影响；</p><p>​- 这个时候我们就说，用户指定的输入就被当作了文件包含函数的参数，这个时候，这个代码就很有可能出现文件包含漏洞。</p><h2 id="文件包含利用的特点"><a href="#文件包含利用的特点" class="headerlink" title="文件包含利用的特点"></a>文件包含利用的特点</h2><p>先注意：再PHP文件的文件包含函数特点：</p><ul><li><p>文件包含的那个目标，他的内容是PHP，它将会解析执行</p><p>举例：</p><p>现在有一个文件包含函数include(“a.txt”),这个a.txt文件内容是一段php代码，这种情况下，这个”inciude(“a.txt”)”代码执行的结果就是a.txt当中包含的php代码被解析执行。</p></li><li><p>文件包含它的内容是普通文本，就会读取到文件内容</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210211515617.png" alt="image-20241210211515617"></p><p>像上图这样文件包含的代码，从这个代码出发，能做的利用有两种：</p><ul><li><p>本地文件包含(LFI)</p><p>这里填入的文件名是一个本地的文件名，这个时候利用的范围是相对来说比较受限的，只能用服务器上已经存在的文件作为文件包含的参数</p></li><li><p>远程文件包含(RFI)</p><p>利用条件会更加严格，对于php.ini当中的配置也会有一定的要求，而且默认php.ini的配置是不允许远程文件包含的，</p><p>如果一个代码中存在远程文件包含，甚至就可以作任意命令执行，可以直接拿到服务器的访问控制权，</p><p>因为：文件包含函数遇到内容是php,会解析执行，我只需要再我的服务器上放一段恶意的php代码，然后用远程文件包含的这个漏洞去包含我那个服务器的恶意的php，就能实现任意命令执行操作。</p></li></ul><p>接下来会以本地包含为主 ，远程能做的已经很多了，本地需要学习更多的技巧来突破他所带来的局限性。</p><p>局限1： 如果我们想要得到的目标是去读取php的源代码，不想要后端源代码的执行结果（直接访问php文件就可），有些情况通过文件包含的方式去执行php代码，不能通过文件访问的方式执行php代码，</p><p>局限2：我们知道本地文件包含的前提是我们想要一个文件包含的结果，他必须在本地服务器上存在对应的文件，需要一种办法可以任意的决定文件包含的结果。</p><p>想要突破本地文件包含的一些限制的话，需要一个工具：php伪协议。</p><h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><p>伪协议：它长得像协议一样，它完成的是一些像协议的事情，但它本身不是一个协议。</p><h3 id="file-协议"><a href="#file-协议" class="headerlink" title="file:&#x2F;&#x2F;协议"></a>file:&#x2F;&#x2F;协议</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210233431417.png" alt="image-20241210233431417"></p><p>如果file参数被放到像include()文件包含函数里面的话，那么D盘&#x2F;soft…里面的phpcode.txt文件就会被包含进去，如果这个文件的内容是php代码的话，它就会解析执行，即使它的扩展名是.txt；如果它的文件内容是普通文本的话，普通文本的内容就会被作为文件包含的结果。</p><h3 id="php-input协议"><a href="#php-input协议" class="headerlink" title="php:&#x2F;&#x2F;input协议"></a>php:&#x2F;&#x2F;input协议</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210234012598.png" alt="image-20241210234012598"></p><p>当文件包含函数遇到php:&#x2F;&#x2F;input伪协议（include(“php:&#x2F;&#x2F;input”))的时候，它就会把POST的内容当作文件包含的结果。</p><p>例如：</p><p> <img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241210235158012.png" alt="image-20241210235158012"></p><p>在这里把php:&#x2F;&#x2F;input传入参数filename里面，参数后续会被放到文件包含的函数里面，这个时候我给他POST了一段php代码”<?php system('whoami');?>“,</p><p>它的结果是这段php代码解析执行后的结果，我让他执行woami,它就把当前的系统的用户名给输出出来了。</p><p>所以，php:&#x2F;&#x2F;input伪协议</p><p>可以用于执行php代码，（前提条件：allow_url_include是一个打开的状态）</p><p>可以用于控制文件包含的结果。 </p><h3 id="phar-伪协议"><a href="#phar-伪协议" class="headerlink" title="phar:&#x2F;&#x2F;伪协议"></a>phar:&#x2F;&#x2F;伪协议</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211121432002.png" alt="image-20241211121432002"></p><p>xxx.png这个扩展名看起来是一个图片，遇到phar:&#x2F;&#x2F;伪协议，还是会当作压缩包来处理，会读取这个压缩包内部的shell.php文件。</p><p>用途：</p><p>文件上传漏洞组合拳：</p><p>文件上传的一大难点是限制扩展名，如果现在只允许上传zip压缩包，要实现任意命令执行该怎么办？——如果同时找到文件包含漏洞，就可以把一句话木马压缩到zip压缩包里面，</p><p>这种情况下配合phar:&#x2F;&#x2F;伪协议:(?file&#x3D;phar:&#x2F;&#x2F;zip&#x2F;trojan.php)就可以把这个压缩包里面的所包含的这个木马做解析执行的操作。</p><h3 id="zip-伪协议"><a href="#zip-伪协议" class="headerlink" title="zip:&#x2F;&#x2F;伪协议"></a>zip:&#x2F;&#x2F;伪协议</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211122647534.png" alt="image-20241211122647534"></p><h3 id="php-filter（本地磁盘文件进行读取）"><a href="#php-filter（本地磁盘文件进行读取）" class="headerlink" title="php:&#x2F;&#x2F;filter（本地磁盘文件进行读取）"></a>php:&#x2F;&#x2F;filter（本地磁盘文件进行读取）</h3><p>![](C:\Users\lenovo\Pictures\Screenshots\屏幕截图 2024-12-11 124243.png)</p><p>看下面这个例子：</p><p>从右向左读：读取xxx.php这个文件内容，把它作为读取的源头（resource),接着对它做编码的转换，把它读取进来之后把它放到一个文件包含函数里面（filename);</p><p>原本文件包含函数include(xxx,php)直接往里面传一个php，会解析执行，把它解析执行的结果作为文件包含的结果，现在有了php:&#x2F;&#x2F;filter伪协议，将原本php代码的文件转换成不是php代码的格式（对它做编码了），作为普通文本，会把内容原封不动读取出来。</p><p>php:&#x2F;&#x2F;filter伪协议是用于突破做php代码的源代码读取。</p><h3 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h3><p>data 伪协议是 PHP 中的一个特殊协议，它允许将原始数据嵌入到 URL 中。通过文件包含漏洞，我们可以利用这个 伪协议，将恶意 PHP 代码作为数据嵌入，并让服务器解释执行。 </p><p>data 伪协议 格式：</p><p> data:&#x2F;&#x2F;{}{,base64}, MIME-type：指定数据的类型，默认是 text&#x2F;plain。 charset：指定数据的编码类型，如 utf8，默认是这个类型，所以直接不显示。 base64：如果使用 Base64 编码，则加上该标识。 data：实际的数据内 容。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="1-利用php-input"><a href="#1-利用php-input" class="headerlink" title="1.利用php:&#x2F;&#x2F;input"></a>1.利用php:&#x2F;&#x2F;input</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-12-11%20124539.png"></p><p>代码分析：</p><ol start="2"><li><p>把flag包含进去；</p></li><li><p>把当前的代码再页面上展示；</p></li><li><p>extract()函数：能够把数组变成变量名和变量名的声明；在这里把$_GET这个数组作为了estract这个函数的参数，这行代码执行后，用户传入的所有GET请求的参数，它的参数值就是变量值，参数名就变成了变量名；</p><p>如果现在发送的请求是：&#x2F;？a&#x3D;1&amp;b&#x3D;2,传了两个GET请求的参数，那么这行代码执行会就会变成：$a&#x3D;1;$b&#x3D;2;</p><p>后面的aurora1,aurora2…都可以传入GET型请求参数的方式对他的变量值进行定义；</p></li><li><p>判断aurora1的值是否为空；</p></li><li><p>把传入的aurora2作为文件包含的参数，也就是说把aurora2作为一个文件名，放入文件包含函数里面；</p><p>注意：aurora2是由用户可控的，这里就有了文件包含漏洞；</p><p>把aurora2这个文件读取出来后，去除首尾空格（trin()），把它的结果给aurora3，</p></li><li><p>核对：aurora1,3是否相等；</p></li></ol><p>这个题目原本的目的&#x2F;最直接的想法：</p><p>假如知道服务器里的一个文件和文件内容就好了，比如说，我们知道服务器有一个文件a.txt它的内容是123，那我们在aurora1里传入123，在2里传入a.txt，就满足条件，输出flag;</p><p>关键在于：不知道服务器上有什么文件，也不知内容；</p><p>解决办法：</p><p>php:&#x2F;&#x2F;input伪协议（把POST内容当作文件包含的结果）</p><p>在aurora2这里用php:&#x2F;&#x2F;input作为参数传进去，那么aurora3这里的结果就由我们可控了</p><p>具体操作：</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-12-11%20131900.png"></p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211132708945.png" alt="image-20241211132708945"></p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-12-11%20132124.png"></p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211134636729.png" alt="image-20241211134636729"></p><ol start="2"><li><ol start="3"><li><ol start="4"><li>：从GET参数里面接收3个变量，user，file，pass，</li></ol></li></ol></li><li><p>判断user有没有set，然后从user 里面去读文件包含（这里有漏洞点），让文件包含结果&#x3D;&#x3D;the user is admin，用php:&#x2F;&#x2F;input伪协议；</p></li><li><p>进入题目第二步；把file作为文件包含的参数（也是文件包含漏洞）；</p><p>后面给了一个提示：好像想让我们包含class.php进去，但我们不知道class.php是什么，因此我们读取它的源代码，</p></li></ol><p>解题：</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-12-11%20192012.png"></p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211192104866.png" alt="image-20241211192104866"></p><p>进行base64解码；</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211192224031.png" alt="image-20241211192224031"></p><ol start="2"><li>定义了一个类Read,</li><li>有一个成员变量或一个属性，它的值是file，</li><li>有一个魔术方法toString():把对象当作字符串来使用的时候，就会自动调用它的toString魔术方法，</li><li>如果file有内容的话，</li><li>就把它放在文件包含函数里面，</li></ol><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211192958015.png" alt="image-20241211192958015"></p><ol start="8"><li><p>如果传人的file包含f1a9的话，（f1a9这个文件肯定很可疑，）</p></li><li><p>程序退出</p><p>因此，我们要设法把f1a9这个文件读取出来，</p></li><li><p>对pass这个参数做反序列化操作，</p></li><li><p>输出反序列化的对象；这里触发了上面魔术方法的触发条件，这个反序列化后的结果输出了出来，其实就是把反序列化这个Read对象当作字符串来用，相应的就会调用toString魔术方法，</p></li></ol><p>如果往12中传入的Read对象是一个file属性是一个f1a9.php源代码的属性，这个时候在后续13echo反序列化结果的时候，就会自动调用toString魔术方法，而这个魔术方法会自然而然的把Read这个file属性放到文件包含函数的参数里面，这时就变相的把f1a9.php的内容给读取出来了</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20241211194748494.png" alt="image-20241211194748494"></p><ol start="14"><li>进行序列化；</li></ol><p>后续把序列化内容放到index.php 12中。</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p><a href="https://www.nssctf.cn/problem/2821">https://www.nssctf.cn/problem/2821</a></p><h3 id="4-phar"><a href="#4-phar" class="headerlink" title="4.phar:&#x2F;&#x2F;"></a>4.phar:&#x2F;&#x2F;</h3><p><a href="https://blog.csdn.net/abc18964814133/article/details/124664538">伪协议解释+一道例题解析</a></p><p><a href="https://www.nssctf.cn/problem/2026">例题</a></p><p><a href="https://www.cnblogs.com/bkofyZ/p/17624634.html">解析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件包含漏洞分析&quot;&gt;&lt;a href=&quot;#文件包含漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;文件包含漏洞分析&quot;&gt;&lt;/a&gt;文件包含漏洞分析&lt;/h1&gt;&lt;h2 id=&quot;什么是文件包含&quot;&gt;&lt;a href=&quot;#什么是文件包含&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/10/15/hello-world/"/>
    <id>http://example.com/2024/10/15/hello-world/</id>
    <published>2024-10-15T04:53:53.440Z</published>
    <updated>2024-10-15T04:53:53.440Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
