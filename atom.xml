<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>heihei~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-16T12:44:40.159Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>It is mine</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>”有关RCE、SQL题目“</title>
    <link href="http://example.com/2025/03/16/%E2%80%9D%E6%9C%89%E5%85%B3RCE%E3%80%81SQL%E9%A2%98%E7%9B%AE%E2%80%9C/"/>
    <id>http://example.com/2025/03/16/%E2%80%9D%E6%9C%89%E5%85%B3RCE%E3%80%81SQL%E9%A2%98%E7%9B%AE%E2%80%9C/</id>
    <published>2025-03-16T12:44:00.000Z</published>
    <updated>2025-03-16T12:44:40.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关RCE、SQL题目"><a href="#有关RCE、SQL题目" class="headerlink" title="有关RCE、SQL题目"></a>有关RCE、SQL题目</h1><h2 id="1-NSSRound-8-Basic-MyDoor"><a href="#1-NSSRound-8-Basic-MyDoor" class="headerlink" title="1.[NSSRound#8 Basic]MyDoor"></a>1.[NSSRound#8 Basic]MyDoor</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316150216962.png" alt="image-20250316150216962"></p><p>什么也没有，</p><p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php</p><p>然后解码：</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316145928292.png" alt="image-20250316145928292"></p>phperror_reporting(0);if (isset($_GET['N_S.S'])) {    eval($_GET['N_S.S']);}if(!isset($_GET['file'])) {    header('Location:/index.php?file=');} else {    $file = $_GET['file'];    if (!preg_match('/\.\.|la|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is', $file)) {        include $file;    } else {        die('error.');    }}error_reporting(0); 关闭了所有的错误报告。![image-20250316151654822](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316151654822.png)NSSCTF{61c40417-c85a-4942-9ea4-372a0816557c}## 2.[MoeCTF 2021]babyRCE![image-20250316154057366](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154057366.png)过滤了数字，空格还有一些常见的函数，关键字。既然过滤了空格的话，就不得不用IFS了.![image-20250316154312332](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154312332.png)直接cat,![image-20250316154508870](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154508870.png)啥也没有，查看源代码；![image-20250316154535113](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154535113.png)NSSCTF{c09a935e-7121-4336-909b-f9e82dd27d79}## 3.[SWPUCTF 2023 秋季新生赛]RCE-PLUS![image-20250316171110849](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171110849.png)看到shell_exec和blacklist，知道是无回显rce。/?cmd=ls /|tee a.txt![image-20250316171420268](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171420268.png)接着  /?cmd=cat /f*|tee a.txt再访问a.xt![image-20250316171742247](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171742247.png)## 4.[SWPUCTF 2023 秋季新生赛]Pingpingping![image-20250316201441075](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316201441075.png)?Ping[ip.exe=127.0.0.1||cat /flag![image-20250316201752956](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316201752956.png)##  5.[FSCTF 2023]细狗2.01.![image-20250316172351404](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316172351404.png)![image-20250316172334144](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250316172334144.png)2.发现有两个php，我们尝试用cat命令查看一下 ,尝试后构造出最终的payload过滤了空格和cat 空格用${[IFS](https://so.csdn.net/so/search?q=IFS&spm=1001.2101.3001.7020)}替换就行 cat用nl代替1;nl${IFS}/f*![image-20250316172722752](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316172722752.png)NSSCTF{a966083d-6da1-402f-84ae-5f6696083fa1}## 6.整型注入![image-20250307203229035](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250307203229035.png)**第一步：**首先知道表格有几列，如果报错就是超过列数，如果显示正常就是没有超出列数。输入：1 order by 2 正常回显：1 order by 3出错；说明有两列；![](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%25E5%25B1%258F%25E5%25B9%2595%25E6%2588%25AA%25E5%259B%25BE%25202025-03-07%2520204120.png)![](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%25E5%25B1%258F%25E5%25B9%2595%25E6%2588%25AA%25E5%259B%25BE%25202025-03-07%2520204336.png)**第二步：**爆出显示位，就是看看表格里面那一列是在页面显示的。可以看到是第一列和第二列里面的数据是显示在页面的：![](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%25E5%25B1%258F%25E5%25B9%2595%25E6%2588%25AA%25E5%259B%25BE%25202025-03-07%2520204519.png)**第三步：**获取当前数据名和版本号，这个就涉及mysql数据库的一些函数，记得就行。通过结果知道当前数据库名是sqli,版本是...![image-20250307204726258](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250307204726258.png)**第四步：** 爆出当前数据库内的所有表名。information_schema.tables表示该数据库下的tables表，点表示下一级。where后面是条件，group_concat()是将查询到结果连接起来。如果不用group_concat查询到的只有news。该语句的意思是查询information_schema数据库下的tables表里面且table_schema字段内容是sqli的所有table_name的内容。也就是下面表格news和flag。![image-20250310192436408](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310192436408.png)**第五步：**爆出当前数据库中flag表所有列名，我们通过sql语句查询知道当前数据库有两个表，根据表名知道是在flag表中。接下来我们就是得到该表下的字段名以及内容。该语句的意思是查询information_schema数据库下的columns表里面且table_users字段内容是flag的所有column_name的内。注意table_name字段不是只存在于tables表，也是存在columns表中。表示所有字段对应的表名。![image-20250310192908305](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310192908305.png)**第六步：**列名只有一个，说明只有一个叫flag的列，爆出，,接下来我们就要得到该字段对应的内容。![image-20250310193213595](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310193213595.png)##  7.字符型注入![image-20250310201006960](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310201006960.png)![image-20250310201029171](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310201029171.png)![image-20250310201152241](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201152241.png)![image-20250310201242535](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310201242535.png)![image-20250310201312350](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310201312350.png)![image-20250310201410579](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310201410579.png)![image-20250310201654237](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310201654237.png)![image-20250310202021891](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310202021891.png)]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有关RCE、SQL题目&quot;&gt;&lt;a href=&quot;#有关RCE、SQL题目&quot; class=&quot;headerlink&quot; title=&quot;有关RCE、SQL题目&quot;&gt;&lt;/a&gt;有关RCE、SQL题目&lt;/h1&gt;&lt;h2 id=&quot;1-NSSRound-8-Basic-MyDoor&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RCE-SQL.10</title>
    <link href="http://example.com/2025/03/16/RCE-SQL-10/"/>
    <id>http://example.com/2025/03/16/RCE-SQL-10/</id>
    <published>2025-03-16T12:33:05.000Z</published>
    <updated>2025-03-16T12:33:59.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关RCE、SQL题目"><a href="#有关RCE、SQL题目" class="headerlink" title="有关RCE、SQL题目"></a>有关RCE、SQL题目</h1><h2 id="1-NSSRound-8-Basic-MyDoor"><a href="#1-NSSRound-8-Basic-MyDoor" class="headerlink" title="1.[NSSRound#8 Basic]MyDoor"></a>1.[NSSRound#8 Basic]MyDoor</h2><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316150216962.png" alt="image-20250316150216962"></p><p>什么也没有，</p><p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php</p><p>然后解码：</p><p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316145928292.png" alt="image-20250316145928292"></p>phperror_reporting(0);if (isset($_GET['N_S.S'])) {    eval($_GET['N_S.S']);}if(!isset($_GET['file'])) {    header('Location:/index.php?file=');} else {    $file = $_GET['file'];    if (!preg_match('/\.\.|la|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is', $file)) {        include $file;    } else {        die('error.');    }}error_reporting(0); 关闭了所有的错误报告。![image-20250316151654822](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316151654822.png)NSSCTF{61c40417-c85a-4942-9ea4-372a0816557c}## 2.[MoeCTF 2021]babyRCE![image-20250316154057366](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154057366.png)过滤了数字，空格还有一些常见的函数，关键字。既然过滤了空格的话，就不得不用IFS了.![image-20250316154312332](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154312332.png)直接cat,![image-20250316154508870](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154508870.png)啥也没有，查看源代码；![image-20250316154535113](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316154535113.png)NSSCTF{c09a935e-7121-4336-909b-f9e82dd27d79}## 3.[SWPUCTF 2023 秋季新生赛]RCE-PLUS![image-20250316171110849](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171110849.png)看到shell_exec和blacklist，知道是无回显rce。/?cmd=ls /|tee a.txt![image-20250316171420268](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171420268.png)接着  /?cmd=cat /f*|tee a.txt再访问a.xt![image-20250316171742247](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316171742247.png)## 4.[SWPUCTF 2023 秋季新生赛]Pingpingping![image-20250316201441075](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316201441075.png)?Ping[ip.exe=127.0.0.1||cat /flag![image-20250316201752956](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316201752956.png)##  5.[FSCTF 2023]细狗2.01.![image-20250316172351404](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316172351404.png)![image-20250316172334144](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250316172334144.png)2.发现有两个php，我们尝试用cat命令查看一下 ,尝试后构造出最终的payload过滤了空格和cat 空格用${[IFS](https://so.csdn.net/so/search?q=IFS&spm=1001.2101.3001.7020)}替换就行 cat用nl代替1;nl${IFS}/f*![image-20250316172722752](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250316172722752.png)NSSCTF{a966083d-6da1-402f-84ae-5f6696083fa1}## 6.整型注入![image-20250307203229035](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250307203229035.png)**第一步：**首先知道表格有几列，如果报错就是超过列数，如果显示正常就是没有超出列数。输入：1 order by 2 正常回显：1 order by 3出错；说明有两列；![](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-07%20204120.png)![](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-07%20204336.png)**第二步：**爆出显示位，就是看看表格里面那一列是在页面显示的。可以看到是第一列和第二列里面的数据是显示在页面的：![](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-03-07%20204519.png)**第三步：**获取当前数据名和版本号，这个就涉及mysql数据库的一些函数，记得就行。通过结果知道当前数据库名是sqli,版本是...![image-20250307204726258](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250307204726258.png)**第四步：** 爆出当前数据库内的所有表名。information_schema.tables表示该数据库下的tables表，点表示下一级。where后面是条件，group_concat()是将查询到结果连接起来。如果不用group_concat查询到的只有news。该语句的意思是查询information_schema数据库下的tables表里面且table_schema字段内容是sqli的所有table_name的内容。也就是下面表格news和flag。![image-20250310192436408](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310192436408.png)**第五步：**爆出当前数据库中flag表所有列名，我们通过sql语句查询知道当前数据库有两个表，根据表名知道是在flag表中。接下来我们就是得到该表下的字段名以及内容。该语句的意思是查询information_schema数据库下的columns表里面且table_users字段内容是flag的所有column_name的内。注意table_name字段不是只存在于tables表，也是存在columns表中。表示所有字段对应的表名。![image-20250310192908305](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310192908305.png)**第六步：**列名只有一个，说明只有一个叫flag的列，爆出，,接下来我们就要得到该字段对应的内容。![image-20250310193213595](https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/image-20250310193213595.png)##  7.字符型注入![image-20250310201006960](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201006960.png)![image-20250310201029171](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201029171.png)![image-20250310201152241](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201152241.png)![image-20250310201242535](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201242535.png)![image-20250310201312350](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201312350.png)![image-20250310201410579](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201410579.png)![image-20250310201654237](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310201654237.png)![image-20250310202021891](C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250310202021891.png)]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有关RCE、SQL题目&quot;&gt;&lt;a href=&quot;#有关RCE、SQL题目&quot; class=&quot;headerlink&quot; title=&quot;有关RCE、SQL题目&quot;&gt;&lt;/a&gt;有关RCE、SQL题目&lt;/h1&gt;&lt;h2 id=&quot;1-NSSRound-8-Basic-MyDoor&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>text</title>
    <link href="http://example.com/2024/12/20/text/"/>
    <id>http://example.com/2024/12/20/text/</id>
    <published>2024-12-20T08:49:46.000Z</published>
    <updated>2024-12-20T09:02:30.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241128194248.jpg" alt="微信图片_20241128194248">]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/LLLLLL-del/Image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241128194248.jpg&quot; alt=&quot;微信图片_20241128194248&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/10/15/hello-world/"/>
    <id>http://example.com/2024/10/15/hello-world/</id>
    <published>2024-10-15T04:53:53.440Z</published>
    <updated>2024-10-15T04:53:53.440Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
